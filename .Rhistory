[1171] "21231"  "21201"  "21201"  "21202"  "21231"  "21202"  "21207"  "21231"  "21214"
[1180] "21202"  "21201"  "21223"  "21218"  "21201"  "21201"  "21213"  "21213"  "21201"
[1189] "21210"  "21224"  "21206"  "21218"  "21205"  "21224"  "21224"  "21201"  "21231"
[1198] "21212"  "21231"  "21206"  "21214"  "21230"  "21224"  "21231"  "21202"  "21229"
[1207] "21231"  "21202"  "21213"  "21224"  "21224"  "21218"  "21218"  "21214"  "21202"
[1216] "21223"  "21201"  "21215"  "21202"  "21224"  "21231"  "21230"  "21214"  "21201"
[1225] "21231"  "21201"  "21224"  "21230"  "21218"  "21206"  "21230"  "21213"  "21230"
[1234] "21226"  "21224"  "21231"  "21230"  "21231"  "21202"  "21202"  "21231"  "21205"
[1243] "21224"  "21224"  "21218"  "21213"  "21205"  "21224"  "21224"  "21202"  "21202"
[1252] "21202"  "21224"  "21215"  "21201"  "21215"  "21210"  "21230"  "21213"  "21202"
[1261] "21201"  "21230"  "21205"  "21201"  "21218"  "21201"  "21231"  "21231"  "21202"
[1270] "21230"  "21224"  "21224"  "21205"  "21201"  "21223"  "21225"  "21202"  "21214"
[1279] "21202"  "21224"  "21218"  "21217"  "21202"  "21224"  "21224"  "21224"  "21212"
[1288] "21215"  "21237"  "21224"  "21218"  "21222"  "21223"  "21215"  "21201"  "21224"
[1297] "21218"  "21212"  "21215"  "21202"  "21223"  "21217"  "21231"  "21213"  "21206"
[1306] "21214"  "21224"  "21224"  "21205"  "21211"  "21218"  "21212"  "21215"  "21202"
[1315] "21201"  "21201"  "21215"  "21224"  "21212"  "21212"  "21231"  "21230"  "21212"
[1324] "21231"  "21213"  "21211"  "21224"
library()
zips = 1
zips <- 1
rootNode
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips
zips == "21231"
sum(zips == "21231")
class(DT1)
DT1[, .N, by = VAL]
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "./Getting and Cleaning Data/NGAP.xlsx", method = "curl")
read.xlsx("./Getting and Cleaning Data/NPAG.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
read.xlsx("./Getting and Cleaning Data/NGAP.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
dat2 <- read.xlsx("./Getting and Cleaning Data/NGAP.xlsx", sheetIndex = 1, colIndex = 7:15, rowIndex = 18:23)
sum(dat2$Zip*dat2$Ext,na.rm=T)
zips
sum(zips == "21231")
x = ;
x = l
x = 1
x = "lkajdf "
swirl()
lirbary(swirl)
library(swirl)
swirl()
mydf -> read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filer(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, r_os == "linux-gnu", size > 100500)
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutatue(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library()
install.package(httpuv)
install.packages(httpuv)
install.packages("httpuv")
library()
library(httr)
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
q1 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", header = TRUE)
head(q1)
names(q1)
q1Split <- strsplit(names(q1), "wgtp")
q1Split
q1Split[123]
q2 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = TRUE)
head(q2)
q2 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = F, skip = 5)
head(q2)
q2Sub <- sub(",", "", q2$V5)
head(q2Sub)
q2Sub <- sub(",", "", q2Sub$V5)
q2Sub <- sub(",", "", q2$V5)
head(q2Sub)
class(q2Sub)
q2Sub <- gsub(",", "", q2$V5)
head(q2Sub)
q2Sub <- as.numeric(q2Sub)
mean(q2Sub)
mean(q2Sub, na.rm = TRUE)
q2Sub <- gsub(",", "", q2$V5)
mean(q2Sub, na.rm = TRUE)
q2 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = F, skip = 5, stringsAsFactors = FALSE, nrows = 190)
tail(q2)
q2Sub <- gsub(",", "", q2$V5)
mean(q2Sub, na.rm = TRUE)
q2Sub <- as.numeric(q2Sub)
mean(q2Sub, na.rm = TRUE)
q4 <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", header = TRUE, stringsAsFactors = FALSE)
head(q4)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
head(amzn)
q5 <- grep("2012", sampleTimes)
length(q5)
q5
q5Dates <- sampleTimes[q5]
q5Dates
class(q5Dates)
dow <- format(q5Dates, "%a %b %d %Y")
dow
mon <- grep("Mon", dow)
mon
length(mon)
head(q1)
head(q2)
head(q4)
merged <- merge(q2, q4, by.x = "V1", by.y = "Country Code")
merged <- merge(q2, q4, by.x = "V1", by.y = "CountryCode")
head(merged)
head(q2)
x <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
x <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
head(x)
merged$Special.Notes
grep("Fiscal year end" & "June", merged)
grep("Fiscal year end", merged)
grep("Fiscal year end", merged$Special.Notes)
notes <- merged$Special.Notes
notes
x2 <- notes[grep("Fiscal year end", merged$Special.Notes)]
x2
x2[grep("June", x2)]
getwd()
setwd("RepResearch")
getwd()
list.files()
read.csv("activity.csv", lines = 5)
read.csv("activity.csv", nrows = 5)
temp <- read.csv("activity.csv", nrows = 5)
class(temp)
sapply(temp, class)
temp <- read.csv("activity.csv", nrows = 20)
temp
temp <- read.csv("activity.csv", nrows = 50)
temp
temp <- read.csv("activity.csv", nrows = 1000)
tail(temp, 50)
sapply(temp, class)
temp <- read.csv("activity.csv", nrows = 1000, colClasses = c("numeric", "date", "numeric"))
temp
sapply(temp, class)
temp <- read.csv("activity.csv", nrows = 1000, colClasses = c("numeric", "POSIXct", "numeric"))
sapply(temp, class)
head(temp)
temp <- read.csv("activity.csv", nrows = 1000, colClasses = c("numeric", "POSIXlt", "numeric"))
temp <- read.csv("activity.csv", nrows = 1000, colClasses = c("numeric", "POSIXct", "numeric"))
activity <- read.csv("activity.csv", header = TRUE, colClasses = c("numeric", "date", "numeric"))
activity <- read.csv("activity.csv", header = TRUE, colClasses = c("numeric", "POSIXct", "numeric"))
head(activity)
temp
head(temp)
plot(temp$date, temp$steps)
plot(activity$date, activity$steps)
summary(activity)
str(activity)
library(dplyr)
activity %>% group_by(date) %>% summarize(steps, mean, na.rm = TRUE)
activity %>% group_by(date) %>% summarize(steps, mean)
x1 <- group_by(activity, date)
x1
x2 <- summarize(x1, mean)
activity %>% group_by(date) %>% summarize(avg = mean(steps, na.rm = TRUE))
activity %>% group_by(date) %>% summarize(Average_Steps_per_Day = mean(steps, na.rm = TRUE))
AvgStepsPerDay <-
activity %>%
group_by(date) %>%
summarize(Average_Steps_per_Day = mean(steps, na.rm = TRUE))
hist(AvgStepsPerDay$Average_Steps_per_Day)
AvgStepsPerDay <-
activity %>%
group_by(date) %>%
summarize(AveSteps = mean(steps, na.rm = TRUE))
hist(AvgStepsPerDay$AverageSteps)
hist(AvgStepsPerDay$AverageSteps,
col = "red",
xlab = "Average Steps Per Day"
main = "Histogram of Average Steps Per Day")
hist(AvgStepsPerDay$AverageSteps,
col = "red",
xlab = "Average Steps Per Day",
main = "Histogram of Average Steps Per Day")
hist(AvgStepsPerDay$AveSteps,
col = "red",
xlab = "Average Steps Per Day",
main = "Histogram of Average Steps Per Day")
hist(AvgStepsPerDay$AveSteps,
col = "gray",
xlab = "Average Steps Per Day",
main = "Histogram of Average Steps Per Day")
hist(AvgStepsPerDay$AveSteps,
col = "bluegray",
xlab = "Average Steps Per Day",
main = "Histogram of Average Steps Per Day")
hist(AvgStepsPerDay$AveSteps,
col = "gray",
xlab = "Average Steps Per Day",
main = "Histogram of Average Steps Per Day")
summarize(AveSteps = mean(steps, na.rm = TRUE))
TotalStepsPerDay <-
activity %>%
group_by(date) %>%
summarize(TotalSteps = sum(steps, na.rm = TRUE))
TotalStepsPerDay
TotalStepsPerDay <-
activity %>%
group_by(date) %>%
summarize(TotalSteps = mean(steps, na.rm = TRUE))
TotalStepsPerDay <-
activity %>%
group_by(date) %>%
summarize(TotalSteps = sum(steps, na.rm = TRUE))
TotalStepsPerDay %>% summarize(Mean = mean(TotalSteps, na.rm = TRUE),
median(TotalSteps, na.rm = TRUE))
TotalStepsPerDay %>% summarize(Mean = mean(TotalSteps, na.rm = TRUE),
Median = median(TotalSteps, na.rm = TRUE))
TotalStepsPerDay %>% summarize(MeanStepsPerDay = mean(TotalSteps, na.rm = TRUE),
MedianStepsPerDay = median(TotalSteps, na.rm = TRUE))
head(average)
head(activity)
AvgActivity <-
activity %>%
group_by(interval) %>%
summarize(Average = mean(steps, na.rm=TRUE))
AvgActivity
plot(AvgActivity$interval, AvgActivity$Average)
plot(AvgActivity$interval, AvgActivity$Average, type = "l")
plot(AvgActivity$interval, AvgActivity$Average,
type = "l",
xlab = "Interval",
ylab = "Average Steps",
main = "Average Daily Activity Pattern")
plot(AvgActivity$interval, AvgActivity$Average,
type = "l",
xlab = "5-min Interval",
ylab = "Average Steps",
main = "Average Daily Activity Pattern")
max(AvgActivity)
max(AvgActivity$Average)
AvgActivity$Average == 206.1698
sapply(AvgActivity, max)
which.max(AvgActivity$Average)
AverageActivity[104,]
AveActivity[104,]
AvgActivity[104,]
AvgActivity[which.max(AvgActivity$Average),]
is.na(activity)
which(is.na(activity))
which(is.na(activity$steps))
which(is.na(activity)) == which(is.na(activity$steps))
AvgActivity
Complete_activity <-
activity %>%
group_by(interval) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps))
Complete_activity
activity
head(activity)
Complete_activity
AvgActivity
sum(is.na(activity))
sum(is.na(activity$steps))
CompleteTotalSteps <-
Complete_activity %>%
group_by(date) %>%
summarize(TotalSteps = sum(steps))
hist(CompleteTotalSteps$TotalSteps,
col = "darkblue",
xlab = "Total Steps Per Day",
main = "Histogram of Total Steps Per Day using Complete Data")
CompleteTotalSteps %>% summarize(MeanComplete = mean(TotalSteps, na.rm = TRUE),
MedianComplete = median(TotalSteps, na.rm = TRUE))
tail(activity)
activity[1000:1020,]
Complete_activity[1000:1020,]
Complete_activity <-
activity %>%
group_by(interval) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
ungroup()
Complete_activity
CompleteTotalSteps <-
Complete_activity %>%
group_by(date) %>%
summarize(TotalSteps = sum(steps))
hist(CompleteTotalSteps$TotalSteps,
col = "darkblue",
xlab = "Total Steps Per Day",
main = "Histogram of Total Steps Per Day using Complete Data")
CompleteTotalSteps %>% summarize(MeanComplete = mean(TotalSteps, na.rm = TRUE),
MedianComplete = median(TotalSteps, na.rm = TRUE))
AvgActivityC <-
Complete_activity %>%
group_by(interval) %>%
summarize(Average = mean(steps, na.rm=TRUE))
plot(AvgActivityC$interval, AvgActivityC$Average,
type = "l",
xlab = "5-min Interval",
ylab = "Average Steps",
main = "Average Daily Activity Pattern")
weekend(activty$date)
weekdays(activty$date)
weekdays(activity$date)
activity[,"dayofweek"] <- weekdays(activity$date)
head(activity)
weekend <- function(x){
for(i in x){
if(i == "Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"){
i <- "weekday"
}
else if(i == "Saturday"|"Sunday"){
i <- "weekend"
}
}
}
}
weekend <- function(x){
for(i in x){
if(i == "Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"){
i <- "weekday"
}
else if(i == "Saturday"|"Sunday"){
i <- "weekend"
}
}
}
x <- c("Monday", "Tuesday", "Friday", "Saturday")
x
weekend(c)
weekend(x)
weekend <- function(x){
for(i in x){
if(i == "Monday"| i == "Tuesday"| i == "Wednesday"| i == "Thursday"| i == "Friday"){
i <- "weekday"
}
else if(i == "Saturday"| i == "Sunday"){
i <- "weekend"
}
}
}
weekend(x)
x
weekend <- function(x){
for(i in x){
if(i == "Monday"| i == "Tuesday"| i == "Wednesday"| i == "Thursday"| i == "Friday"){
i <- "weekday"
}
else if(i == "Saturday"| i == "Sunday"){
i <- "weekend"
}
}
x
}
weekend(x)
weekend <- function(x){
j <- c()
for(i in x){
if(i == "Monday"| i == "Tuesday"| i == "Wednesday"| i == "Thursday"| i == "Friday"){
j <- c(j, "weekday")
}
else if(i == "Saturday"| i == "Sunday"){
j <- c(j, "weekend")
}
}
x
}
weekend <- function(x){
j <- c()
for(i in x){
if(i == "Monday"| i == "Tuesday"| i == "Wednesday"| i == "Thursday"| i == "Friday"){
j <- c(j, "weekday")
}
else if(i == "Saturday"| i == "Sunday"){
j <- c(j, "weekend")
}
}
j
}
weekend(x)
z <- head(activity, 20)
z
weekend(z$dayofweek)
z[,"weekdayFactor"] <- weekend(z$dayofweek)
z
activity2[,"dayofweek"] <- weekdays(activity$date)
activity2 <- activity[,"dayofweek"] <- weekdays(activity$date)
head(activity2)
activity2 <- activity[,"dayofweek"] = weekdays(activity$date)
activity[, "weekdayFactor"] <- weekend(activity$dayofweek)
head(activity)
head(activity) %>% mutate(dayofweek = rename("Monday", weekday))
if(i == "Monday"| i == "Tuesday"| i == "Wednesday"| i == "Thursday"| i == "Friday"){
head(activity)
Completeactivity[, "weekdayFactor"] <- weekend(activity$dayofweek)
Complete_activity[,"dayofweek"] <- weekdays(activity$date)
Complete_activity[, "weekdayFactor"] <- weekend(activity$dayofweek)
head(Complete_activity)
activity <- read.csv("activity.csv", header = TRUE, colClasses = c("numeric", "POSIXct", "numeric"))
Complete_activity <-
activity %>%
group_by(interval) %>%
mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = TRUE), steps)) %>%
ungroup()
Complete_activity
Complete_activity[,"dayofweek"] <- weekdays(activity$date)
Complete_activity <-
Complete_activity %>%
mutate(weekdayFactor = ifelse(weekday == "Sunday"| weekday == "Saturday", "weekend", "weekday")) %>%
ungroup()
Complete_activity
Complete_activity <-
Complete_activity %>%
mutate(weekdayFactor = ifelse(dayofweek == "Sunday"| dayofweek == "Saturday", "weekend", "weekday")) %>%
ungroup()
Complete_activity
Complete_activity[1:50,]
Complete_activity[50,]
Complete_activity[100,]
Complete_activity[1000,]
Complete_activity$dayofweek == "Saturday"
Complete_activity[1500:1600,]
library(ggplot2)
StepsbyFactor <-
Complete_activity %>%
group_by(weekdayFactor) %>%
summarize(TotalSteps = sum(steps))
StepsbyFactor
StepsbyFactor <-
Complete_activity %>%
group_by(weekdayFactor, interval) %>%
summarize(TotalSteps = sum(steps))
StepsbyFactor
StepsbyFactor <-
Complete_activity %>%
group_by(weekdayFactor, interval) %>%
summarize(TotalSteps = sum(steps)) %>%
ungroup()
qplot(interval, TotalSteps, data=StepsbyFactor, color = weekdayFactor)
qplot(interval, TotalSteps, data=StepsbyFactor, color = weekdayFactor, type = "l")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = .~weekdayFactor, type = "l")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor.~, type = "l")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., type = "l")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., geom = "line")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., geom = "line", color = "weekdayFactor")
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., geom = "line")
qplot(interval, TotalSteps, data=StepsbyFactor,
facets = weekdayFactor~., geom = "line",
ylab = "Number of Total Steps", xlab = "Time Interval",
title = "Weekday vs Weekend Activity")
b. summarize the steps with the sum function
CompleteTotalSteps <-
Complete_activity %>%
group_by(date) %>%
summarize(TotalSteps = mean(steps))
StepsbyFactor <-
Complete_activity %>%
group_by(weekdayFactor, interval) %>%
summarize(TotalSteps = sum(steps)) %>%
ungroup()
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., geom = "line")
StepsbyFactor <-
Complete_activity %>%
group_by(weekdayFactor, interval) %>%
summarize(TotalSteps = mean(steps)) %>%
ungroup()
qplot(interval, TotalSteps, data=StepsbyFactor, facets = weekdayFactor~., geom = "line")
knit2html(PA1_template.Rmd, PA1_template.htmp)
library(knitr)
knit2html(PA1_template.Rmd, PA1_template.htmp)
knit2html("PA1_template.Rmd", "PA1_template.htmp")
knit2html("PA1_template.Rmd", "PA1_template.html")
library(knitr)
knit2html("PA1_template.Rmd", "PA1_template.html")
getwd()
